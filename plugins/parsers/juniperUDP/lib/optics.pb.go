// Code generated by protoc-gen-go. DO NOT EDIT.
// source: optics.proto

/*
Package optics is a generated protocol buffer package.

It is generated from these files:
	optics.proto

It has these top-level messages:
	Optics
	OpticsInfos
	OpticsDiagStats
	OpticsDiagLaneStats
*/
package optics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import telemetry_top "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Optics struct {
	OpticsDiag       []*OpticsInfos `protobuf:"bytes,1,rep,name=Optics_diag" json:"Optics_diag,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Optics) Reset()                    { *m = Optics{} }
func (m *Optics) String() string            { return proto.CompactTextString(m) }
func (*Optics) ProtoMessage()               {}
func (*Optics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Optics) GetOpticsDiag() []*OpticsInfos {
	if m != nil {
		return m.OpticsDiag
	}
	return nil
}

type OpticsInfos struct {
	IfName           *string          `protobuf:"bytes,1,req,name=if_name" json:"if_name,omitempty"`
	SnmpIfIndex      *uint32          `protobuf:"varint,2,opt,name=snmp_if_index" json:"snmp_if_index,omitempty"`
	OpticsDiagStats  *OpticsDiagStats `protobuf:"bytes,3,opt,name=optics_diag_stats" json:"optics_diag_stats,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *OpticsInfos) Reset()                    { *m = OpticsInfos{} }
func (m *OpticsInfos) String() string            { return proto.CompactTextString(m) }
func (*OpticsInfos) ProtoMessage()               {}
func (*OpticsInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpticsInfos) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *OpticsInfos) GetSnmpIfIndex() uint32 {
	if m != nil && m.SnmpIfIndex != nil {
		return *m.SnmpIfIndex
	}
	return 0
}

func (m *OpticsInfos) GetOpticsDiagStats() *OpticsDiagStats {
	if m != nil {
		return m.OpticsDiagStats
	}
	return nil
}

type OpticsDiagStats struct {
	OpticsType                              *uint32                `protobuf:"varint,1,opt,name=optics_type" json:"optics_type,omitempty"`
	ModuleTemp                              *float64               `protobuf:"fixed64,2,opt,name=module_temp" json:"module_temp,omitempty"`
	ModuleTempHighAlarmThreshold            *float64               `protobuf:"fixed64,3,opt,name=module_temp_high_alarm_threshold" json:"module_temp_high_alarm_threshold,omitempty"`
	ModuleTempLowAlarmThreshold             *float64               `protobuf:"fixed64,4,opt,name=module_temp_low_alarm_threshold" json:"module_temp_low_alarm_threshold,omitempty"`
	ModuleTempHighWarningThreshold          *float64               `protobuf:"fixed64,5,opt,name=module_temp_high_warning_threshold" json:"module_temp_high_warning_threshold,omitempty"`
	ModuleTempLowWarningThreshold           *float64               `protobuf:"fixed64,6,opt,name=module_temp_low_warning_threshold" json:"module_temp_low_warning_threshold,omitempty"`
	LaserOutputPowerHighAlarmThresholdDbm   *float64               `protobuf:"fixed64,7,opt,name=laser_output_power_high_alarm_threshold_dbm" json:"laser_output_power_high_alarm_threshold_dbm,omitempty"`
	LaserOutputPowerLowAlarmThresholdDbm    *float64               `protobuf:"fixed64,8,opt,name=laser_output_power_low_alarm_threshold_dbm" json:"laser_output_power_low_alarm_threshold_dbm,omitempty"`
	LaserOutputPowerHighWarningThresholdDbm *float64               `protobuf:"fixed64,9,opt,name=laser_output_power_high_warning_threshold_dbm" json:"laser_output_power_high_warning_threshold_dbm,omitempty"`
	LaserOutputPowerLowWarningThresholdDbm  *float64               `protobuf:"fixed64,10,opt,name=laser_output_power_low_warning_threshold_dbm" json:"laser_output_power_low_warning_threshold_dbm,omitempty"`
	LaserRxPowerHighAlarmThresholdDbm       *float64               `protobuf:"fixed64,11,opt,name=laser_rx_power_high_alarm_threshold_dbm" json:"laser_rx_power_high_alarm_threshold_dbm,omitempty"`
	LaserRxPowerLowAlarmThresholdDbm        *float64               `protobuf:"fixed64,12,opt,name=laser_rx_power_low_alarm_threshold_dbm" json:"laser_rx_power_low_alarm_threshold_dbm,omitempty"`
	LaserRxPowerHighWarningThresholdDbm     *float64               `protobuf:"fixed64,13,opt,name=laser_rx_power_high_warning_threshold_dbm" json:"laser_rx_power_high_warning_threshold_dbm,omitempty"`
	LaserRxPowerLowWarningThresholdDbm      *float64               `protobuf:"fixed64,14,opt,name=laser_rx_power_low_warning_threshold_dbm" json:"laser_rx_power_low_warning_threshold_dbm,omitempty"`
	LaserBiasCurrentHighAlarmThreshold      *float64               `protobuf:"fixed64,15,opt,name=laser_bias_current_high_alarm_threshold" json:"laser_bias_current_high_alarm_threshold,omitempty"`
	LaserBiasCurrentLowAlarmThreshold       *float64               `protobuf:"fixed64,16,opt,name=laser_bias_current_low_alarm_threshold" json:"laser_bias_current_low_alarm_threshold,omitempty"`
	LaserBiasCurrentHighWarningThreshold    *float64               `protobuf:"fixed64,17,opt,name=laser_bias_current_high_warning_threshold" json:"laser_bias_current_high_warning_threshold,omitempty"`
	LaserBiasCurrentLowWarningThreshold     *float64               `protobuf:"fixed64,18,opt,name=laser_bias_current_low_warning_threshold" json:"laser_bias_current_low_warning_threshold,omitempty"`
	ModuleTempHighAlarm                     *bool                  `protobuf:"varint,19,opt,name=module_temp_high_alarm" json:"module_temp_high_alarm,omitempty"`
	ModuleTempLowAlarm                      *bool                  `protobuf:"varint,20,opt,name=module_temp_low_alarm" json:"module_temp_low_alarm,omitempty"`
	ModuleTempHighWarning                   *bool                  `protobuf:"varint,21,opt,name=module_temp_high_warning" json:"module_temp_high_warning,omitempty"`
	ModuleTempLowWarning                    *bool                  `protobuf:"varint,22,opt,name=module_temp_low_warning" json:"module_temp_low_warning,omitempty"`
	OpticsLaneDiagStats                     []*OpticsDiagLaneStats `protobuf:"bytes,23,rep,name=optics_lane_diag_stats" json:"optics_lane_diag_stats,omitempty"`
	XXX_unrecognized                        []byte                 `json:"-"`
}

func (m *OpticsDiagStats) Reset()                    { *m = OpticsDiagStats{} }
func (m *OpticsDiagStats) String() string            { return proto.CompactTextString(m) }
func (*OpticsDiagStats) ProtoMessage()               {}
func (*OpticsDiagStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OpticsDiagStats) GetOpticsType() uint32 {
	if m != nil && m.OpticsType != nil {
		return *m.OpticsType
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTemp() float64 {
	if m != nil && m.ModuleTemp != nil {
		return *m.ModuleTemp
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempHighAlarmThreshold() float64 {
	if m != nil && m.ModuleTempHighAlarmThreshold != nil {
		return *m.ModuleTempHighAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempLowAlarmThreshold() float64 {
	if m != nil && m.ModuleTempLowAlarmThreshold != nil {
		return *m.ModuleTempLowAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempHighWarningThreshold() float64 {
	if m != nil && m.ModuleTempHighWarningThreshold != nil {
		return *m.ModuleTempHighWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempLowWarningThreshold() float64 {
	if m != nil && m.ModuleTempLowWarningThreshold != nil {
		return *m.ModuleTempLowWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerHighAlarmThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerHighAlarmThresholdDbm != nil {
		return *m.LaserOutputPowerHighAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerLowAlarmThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerLowAlarmThresholdDbm != nil {
		return *m.LaserOutputPowerLowAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerHighWarningThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerHighWarningThresholdDbm != nil {
		return *m.LaserOutputPowerHighWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerLowWarningThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerLowWarningThresholdDbm != nil {
		return *m.LaserOutputPowerLowWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerHighAlarmThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerHighAlarmThresholdDbm != nil {
		return *m.LaserRxPowerHighAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerLowAlarmThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerLowAlarmThresholdDbm != nil {
		return *m.LaserRxPowerLowAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerHighWarningThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerHighWarningThresholdDbm != nil {
		return *m.LaserRxPowerHighWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerLowWarningThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerLowWarningThresholdDbm != nil {
		return *m.LaserRxPowerLowWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentHighAlarmThreshold() float64 {
	if m != nil && m.LaserBiasCurrentHighAlarmThreshold != nil {
		return *m.LaserBiasCurrentHighAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentLowAlarmThreshold() float64 {
	if m != nil && m.LaserBiasCurrentLowAlarmThreshold != nil {
		return *m.LaserBiasCurrentLowAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentHighWarningThreshold() float64 {
	if m != nil && m.LaserBiasCurrentHighWarningThreshold != nil {
		return *m.LaserBiasCurrentHighWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentLowWarningThreshold() float64 {
	if m != nil && m.LaserBiasCurrentLowWarningThreshold != nil {
		return *m.LaserBiasCurrentLowWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempHighAlarm() bool {
	if m != nil && m.ModuleTempHighAlarm != nil {
		return *m.ModuleTempHighAlarm
	}
	return false
}

func (m *OpticsDiagStats) GetModuleTempLowAlarm() bool {
	if m != nil && m.ModuleTempLowAlarm != nil {
		return *m.ModuleTempLowAlarm
	}
	return false
}

func (m *OpticsDiagStats) GetModuleTempHighWarning() bool {
	if m != nil && m.ModuleTempHighWarning != nil {
		return *m.ModuleTempHighWarning
	}
	return false
}

func (m *OpticsDiagStats) GetModuleTempLowWarning() bool {
	if m != nil && m.ModuleTempLowWarning != nil {
		return *m.ModuleTempLowWarning
	}
	return false
}

func (m *OpticsDiagStats) GetOpticsLaneDiagStats() []*OpticsDiagLaneStats {
	if m != nil {
		return m.OpticsLaneDiagStats
	}
	return nil
}

type OpticsDiagLaneStats struct {
	LaneNumber                        *uint32  `protobuf:"varint,1,opt,name=lane_number" json:"lane_number,omitempty"`
	LaneLaserTemperature              *float64 `protobuf:"fixed64,2,opt,name=lane_laser_temperature" json:"lane_laser_temperature,omitempty"`
	LaneLaserOutputPowerDbm           *float64 `protobuf:"fixed64,3,opt,name=lane_laser_output_power_dbm" json:"lane_laser_output_power_dbm,omitempty"`
	LaneLaserReceiverPowerDbm         *float64 `protobuf:"fixed64,4,opt,name=lane_laser_receiver_power_dbm" json:"lane_laser_receiver_power_dbm,omitempty"`
	LaneLaserBiasCurrent              *float64 `protobuf:"fixed64,5,opt,name=lane_laser_bias_current" json:"lane_laser_bias_current,omitempty"`
	LaneLaserOutputPowerHighAlarm     *bool    `protobuf:"varint,6,opt,name=lane_laser_output_power_high_alarm" json:"lane_laser_output_power_high_alarm,omitempty"`
	LaneLaserOutputPowerLowAlarm      *bool    `protobuf:"varint,7,opt,name=lane_laser_output_power_low_alarm" json:"lane_laser_output_power_low_alarm,omitempty"`
	LaneLaserOutputPowerHighWarning   *bool    `protobuf:"varint,8,opt,name=lane_laser_output_power_high_warning" json:"lane_laser_output_power_high_warning,omitempty"`
	LaneLaserOutputPowerLowWarning    *bool    `protobuf:"varint,9,opt,name=lane_laser_output_power_low_warning" json:"lane_laser_output_power_low_warning,omitempty"`
	LaneLaserReceiverPowerHighAlarm   *bool    `protobuf:"varint,10,opt,name=lane_laser_receiver_power_high_alarm" json:"lane_laser_receiver_power_high_alarm,omitempty"`
	LaneLaserReceiverPowerLowAlarm    *bool    `protobuf:"varint,11,opt,name=lane_laser_receiver_power_low_alarm" json:"lane_laser_receiver_power_low_alarm,omitempty"`
	LaneLaserReceiverPowerHighWarning *bool    `protobuf:"varint,12,opt,name=lane_laser_receiver_power_high_warning" json:"lane_laser_receiver_power_high_warning,omitempty"`
	LaneLaserReceiverPowerLowWarning  *bool    `protobuf:"varint,13,opt,name=lane_laser_receiver_power_low_warning" json:"lane_laser_receiver_power_low_warning,omitempty"`
	LaneLaserBiasCurrentHighAlarm     *bool    `protobuf:"varint,14,opt,name=lane_laser_bias_current_high_alarm" json:"lane_laser_bias_current_high_alarm,omitempty"`
	LaneLaserBiasCurrentLowAlarm      *bool    `protobuf:"varint,15,opt,name=lane_laser_bias_current_low_alarm" json:"lane_laser_bias_current_low_alarm,omitempty"`
	LaneLaserBiasCurrentHighWarning   *bool    `protobuf:"varint,16,opt,name=lane_laser_bias_current_high_warning" json:"lane_laser_bias_current_high_warning,omitempty"`
	LaneLaserBiasCurrentLowWarning    *bool    `protobuf:"varint,17,opt,name=lane_laser_bias_current_low_warning" json:"lane_laser_bias_current_low_warning,omitempty"`
	LaneTxLossOfSignalAlarm           *bool    `protobuf:"varint,18,opt,name=lane_tx_loss_of_signal_alarm" json:"lane_tx_loss_of_signal_alarm,omitempty"`
	LaneRxLossOfSignalAlarm           *bool    `protobuf:"varint,19,opt,name=lane_rx_loss_of_signal_alarm" json:"lane_rx_loss_of_signal_alarm,omitempty"`
	LaneTxLaserDisabledAlarm          *bool    `protobuf:"varint,20,opt,name=lane_tx_laser_disabled_alarm" json:"lane_tx_laser_disabled_alarm,omitempty"`
	XXX_unrecognized                  []byte   `json:"-"`
}

func (m *OpticsDiagLaneStats) Reset()                    { *m = OpticsDiagLaneStats{} }
func (m *OpticsDiagLaneStats) String() string            { return proto.CompactTextString(m) }
func (*OpticsDiagLaneStats) ProtoMessage()               {}
func (*OpticsDiagLaneStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OpticsDiagLaneStats) GetLaneNumber() uint32 {
	if m != nil && m.LaneNumber != nil {
		return *m.LaneNumber
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserTemperature() float64 {
	if m != nil && m.LaneLaserTemperature != nil {
		return *m.LaneLaserTemperature
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerDbm() float64 {
	if m != nil && m.LaneLaserOutputPowerDbm != nil {
		return *m.LaneLaserOutputPowerDbm
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerDbm() float64 {
	if m != nil && m.LaneLaserReceiverPowerDbm != nil {
		return *m.LaneLaserReceiverPowerDbm
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrent() float64 {
	if m != nil && m.LaneLaserBiasCurrent != nil {
		return *m.LaneLaserBiasCurrent
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerHighAlarm() bool {
	if m != nil && m.LaneLaserOutputPowerHighAlarm != nil {
		return *m.LaneLaserOutputPowerHighAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerLowAlarm() bool {
	if m != nil && m.LaneLaserOutputPowerLowAlarm != nil {
		return *m.LaneLaserOutputPowerLowAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerHighWarning() bool {
	if m != nil && m.LaneLaserOutputPowerHighWarning != nil {
		return *m.LaneLaserOutputPowerHighWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerLowWarning() bool {
	if m != nil && m.LaneLaserOutputPowerLowWarning != nil {
		return *m.LaneLaserOutputPowerLowWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerHighAlarm() bool {
	if m != nil && m.LaneLaserReceiverPowerHighAlarm != nil {
		return *m.LaneLaserReceiverPowerHighAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerLowAlarm() bool {
	if m != nil && m.LaneLaserReceiverPowerLowAlarm != nil {
		return *m.LaneLaserReceiverPowerLowAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerHighWarning() bool {
	if m != nil && m.LaneLaserReceiverPowerHighWarning != nil {
		return *m.LaneLaserReceiverPowerHighWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerLowWarning() bool {
	if m != nil && m.LaneLaserReceiverPowerLowWarning != nil {
		return *m.LaneLaserReceiverPowerLowWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentHighAlarm() bool {
	if m != nil && m.LaneLaserBiasCurrentHighAlarm != nil {
		return *m.LaneLaserBiasCurrentHighAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentLowAlarm() bool {
	if m != nil && m.LaneLaserBiasCurrentLowAlarm != nil {
		return *m.LaneLaserBiasCurrentLowAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentHighWarning() bool {
	if m != nil && m.LaneLaserBiasCurrentHighWarning != nil {
		return *m.LaneLaserBiasCurrentHighWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentLowWarning() bool {
	if m != nil && m.LaneLaserBiasCurrentLowWarning != nil {
		return *m.LaneLaserBiasCurrentLowWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneTxLossOfSignalAlarm() bool {
	if m != nil && m.LaneTxLossOfSignalAlarm != nil {
		return *m.LaneTxLossOfSignalAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneRxLossOfSignalAlarm() bool {
	if m != nil && m.LaneRxLossOfSignalAlarm != nil {
		return *m.LaneRxLossOfSignalAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneTxLaserDisabledAlarm() bool {
	if m != nil && m.LaneTxLaserDisabledAlarm != nil {
		return *m.LaneTxLaserDisabledAlarm
	}
	return false
}

var E_JnprOpticsExt = &proto.ExtensionDesc{
	ExtendedType:  (*telemetry_top.JuniperNetworksSensors)(nil),
	ExtensionType: (*Optics)(nil),
	Field:         10,
	Name:          "jnpr_optics_ext",
	Tag:           "bytes,10,opt,name=jnpr_optics_ext",
	Filename:      "optics.proto",
}

func init() {
	proto.RegisterType((*Optics)(nil), "Optics")
	proto.RegisterType((*OpticsInfos)(nil), "OpticsInfos")
	proto.RegisterType((*OpticsDiagStats)(nil), "OpticsDiagStats")
	proto.RegisterType((*OpticsDiagLaneStats)(nil), "OpticsDiagLaneStats")
	proto.RegisterExtension(E_JnprOpticsExt)
}

func init() { proto.RegisterFile("optics.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x53, 0xdb, 0x3a,
	0x14, 0x1d, 0xc3, 0x23, 0x09, 0xd7, 0xc9, 0x03, 0x1c, 0x48, 0x3c, 0xbc, 0xc7, 0xc3, 0xe4, 0x41,
	0x1b, 0x08, 0xa4, 0x2d, 0xd3, 0x2f, 0x68, 0x17, 0x9d, 0x4e, 0x37, 0xed, 0x74, 0xda, 0x05, 0x3f,
	0x40, 0xa3, 0x10, 0x25, 0x51, 0x6b, 0x4b, 0x1e, 0x49, 0x69, 0xc2, 0xb6, 0x7f, 0xb5, 0xff, 0xa1,
	0xeb, 0x8e, 0xe5, 0xa4, 0xc8, 0xb6, 0x9c, 0xee, 0x12, 0xf9, 0x9c, 0x7b, 0xee, 0xbd, 0xd2, 0x39,
	0x50, 0xe7, 0xb1, 0xa2, 0xb7, 0xb2, 0x1f, 0x0b, 0xae, 0xf8, 0x7e, 0x53, 0x91, 0x90, 0x44, 0x44,
	0x89, 0x3b, 0xa4, 0x78, 0x9c, 0x1e, 0x76, 0x7a, 0x50, 0xf9, 0xac, 0x41, 0xde, 0x11, 0xb8, 0xe9,
	0x2f, 0x34, 0xa4, 0x78, 0xec, 0x3b, 0xc1, 0x7a, 0xd7, 0xbd, 0xac, 0xf7, 0xd3, 0xb3, 0xf7, 0x6c,
	0xc4, 0x65, 0x87, 0x2e, 0x21, 0xfa, 0xaf, 0xd7, 0x82, 0x2a, 0x1d, 0x21, 0x86, 0x23, 0xe2, 0x3b,
	0xc1, 0x5a, 0x77, 0xf3, 0xed, 0xc6, 0xf7, 0x37, 0x6b, 0x35, 0xc7, 0xdb, 0x83, 0x86, 0x64, 0x51,
	0x8c, 0xe8, 0x08, 0x51, 0x36, 0x24, 0x73, 0x7f, 0x2d, 0x70, 0xba, 0x0d, 0xaf, 0x07, 0x3b, 0xfc,
	0x5e, 0x00, 0x49, 0x85, 0x95, 0xf4, 0xd7, 0x03, 0xa7, 0xeb, 0x5e, 0x6e, 0x2f, 0x64, 0xde, 0x51,
	0x3c, 0xbe, 0x49, 0xce, 0x3b, 0x3f, 0x6b, 0xb0, 0x95, 0x3b, 0xf3, 0x9a, 0xe0, 0x2e, 0x0a, 0xa8,
	0xbb, 0x38, 0xd1, 0x4c, 0xaa, 0xee, 0x83, 0x1b, 0xf1, 0xe1, 0x34, 0x24, 0x48, 0x91, 0x28, 0xd6,
	0x52, 0x8e, 0x6e, 0x24, 0x70, 0xbc, 0x47, 0x10, 0x18, 0xdf, 0xd0, 0x84, 0x8e, 0x27, 0x08, 0x87,
	0x58, 0x44, 0x48, 0x4d, 0x04, 0x91, 0x13, 0x1e, 0x0e, 0x75, 0x03, 0xbf, 0x09, 0x7d, 0x38, 0x34,
	0x09, 0x21, 0x9f, 0x15, 0xf0, 0x7f, 0x99, 0xf8, 0x27, 0xd0, 0x29, 0x08, 0xcc, 0xb0, 0x60, 0x94,
	0x8d, 0x0d, 0xca, 0x86, 0x49, 0x79, 0x0c, 0x47, 0x79, 0x89, 0x22, 0xa3, 0x62, 0x32, 0xae, 0xa1,
	0x17, 0x62, 0x49, 0x04, 0xe2, 0x53, 0x15, 0x4f, 0x15, 0x8a, 0xf9, 0x8c, 0x08, 0xeb, 0x30, 0x68,
	0x38, 0x88, 0xfc, 0xaa, 0xc9, 0xbd, 0x82, 0x33, 0x0b, 0xd7, 0x32, 0x97, 0xa6, 0xd6, 0x4c, 0xea,
	0x6b, 0xb8, 0x28, 0x93, 0x2d, 0x34, 0xac, 0xd9, 0x9b, 0x26, 0xfb, 0x15, 0x9c, 0x97, 0x08, 0xdb,
	0xc9, 0x60, 0x92, 0x9f, 0xc3, 0xc3, 0x94, 0x2c, 0xe6, 0x7f, 0x9a, 0xd6, 0x35, 0x79, 0xcf, 0xe0,
	0x41, 0x8e, 0x57, 0x36, 0x69, 0xdd, 0xa4, 0xbd, 0x84, 0x53, 0x9b, 0x9c, 0xbd, 0xd1, 0x86, 0xc9,
	0x7c, 0x01, 0x5d, 0x8b, 0xa0, 0x9d, 0xf8, 0xb7, 0x75, 0xc2, 0x01, 0xc5, 0x12, 0xdd, 0x4e, 0x85,
	0x20, 0x4c, 0xd9, 0x1f, 0xe8, 0x96, 0x75, 0xc2, 0x0c, 0xcf, 0xf6, 0x4e, 0xb7, 0xad, 0x13, 0x16,
	0xe5, 0x8a, 0x8f, 0x6f, 0xc7, 0x3a, 0x61, 0x41, 0xb0, 0x48, 0xf4, 0x4c, 0xe2, 0x7f, 0xd0, 0xb2,
	0x7b, 0xcf, 0x6f, 0x06, 0x4e, 0xb7, 0xe6, 0x1d, 0xc0, 0x9e, 0xd5, 0x6a, 0xfe, 0xae, 0xfe, 0x1c,
	0x80, 0x5f, 0xe6, 0x2c, 0x7f, 0x4f, 0x23, 0x0e, 0xa1, 0x5d, 0x62, 0x24, 0xbf, 0xa5, 0x01, 0x4f,
	0xa1, 0xb5, 0x88, 0x8b, 0x10, 0x33, 0x62, 0x86, 0x4e, 0x5b, 0x67, 0xdb, 0xae, 0x11, 0x3a, 0x1f,
	0x31, 0x23, 0x69, 0xf0, 0xfc, 0xa8, 0x40, 0xd3, 0x72, 0x9e, 0xe4, 0x8c, 0x2e, 0xc3, 0xa6, 0xd1,
	0x80, 0x88, 0x34, 0x7c, 0x96, 0x81, 0x77, 0x02, 0x2d, 0xfd, 0x2d, 0xdd, 0x54, 0xd2, 0x0e, 0x11,
	0x58, 0x4d, 0x05, 0xc9, 0xc6, 0xd1, 0x19, 0xfc, 0x63, 0xc0, 0x32, 0xc6, 0x48, 0x1e, 0x48, 0x26,
	0x89, 0xce, 0xe1, 0xc0, 0xc0, 0x0a, 0x72, 0x4b, 0xe8, 0x37, 0x22, 0x0c, 0x74, 0x26, 0x87, 0x0e,
	0xa1, 0x6d, 0xa0, 0xcd, 0xab, 0x4a, 0xc3, 0xc7, 0x3b, 0x83, 0x4e, 0x99, 0xb4, 0x71, 0x33, 0x15,
	0xbd, 0xb7, 0x53, 0x38, 0x2a, 0xc3, 0xde, 0xdf, 0x52, 0x55, 0x43, 0xcf, 0xe1, 0x78, 0x65, 0xd9,
	0xe5, 0x85, 0xd4, 0x34, 0xba, 0x07, 0xff, 0xaf, 0x2a, 0xbc, 0x04, 0x6f, 0x5a, 0x4a, 0xe7, 0x16,
	0x60, 0xf4, 0x0c, 0x96, 0xd2, 0x39, 0xf4, 0x7d, 0xd7, 0xae, 0x06, 0xf7, 0x13, 0x13, 0xad, 0x2c,
	0xbd, 0x6c, 0xa5, 0xae, 0xf1, 0x17, 0x70, 0xb2, 0xba, 0xf8, 0x12, 0xde, 0xd0, 0xf0, 0xec, 0xae,
	0x4b, 0x0c, 0xae, 0xe3, 0x20, 0xbf, 0x6b, 0xbb, 0xa9, 0x75, 0x02, 0xe4, 0x17, 0x52, 0x6a, 0x64,
	0x6d, 0xfc, 0xfc, 0x42, 0xca, 0xcc, 0xab, 0xbd, 0x5e, 0xf3, 0x8e, 0xe1, 0x5f, 0x0d, 0x56, 0x73,
	0x14, 0x72, 0x29, 0x11, 0x1f, 0x21, 0x49, 0xc7, 0x0c, 0x87, 0x8b, 0x06, 0xbc, 0x0c, 0x4a, 0x94,
	0xa0, 0x9a, 0x85, 0x5a, 0x5a, 0x7b, 0x48, 0x25, 0x1e, 0x84, 0x64, 0x68, 0xda, 0xfb, 0xfa, 0x0a,
	0xb6, 0xbe, 0xb0, 0x58, 0xa0, 0x85, 0x41, 0xc9, 0x5c, 0x79, 0xed, 0xfe, 0x87, 0x29, 0xa3, 0x31,
	0x11, 0x9f, 0x88, 0x9a, 0x71, 0xf1, 0x55, 0xde, 0x10, 0x26, 0xb9, 0x90, 0xfa, 0x86, 0xdd, 0xcb,
	0xea, 0xc2, 0xad, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x44, 0x94, 0xb1, 0xb5, 0xd5, 0x08, 0x00,
	0x00,
}
